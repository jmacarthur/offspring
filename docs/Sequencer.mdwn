# Sequencer details

# List of all signals between datapath block and control block

1) Injector fire all                          INJ-ALL
2) Injector divert to subtractor              DIV1
3) Post-memory divert                         DIV2
4) 1st regenerator fire                       REGEN1
5) Post-regen divert to instruction reg       DIV3
6) Post-regen divert to PC                    DIV4
7) Subtractor reset                           ACCZRO
8) Post-subtractor regen fire                 REGEN2
9) Memory enable                              MEMEN
10) Address bar holdup                        ADRHLD
11) Address buffer discard                    ADRBIN
12) Accumlator overflow output to sender      CMP

1 line from the datapath back to control block:

13) Feedback CMP to PC

Of these:

2, 4, 5, 9, 10, 11 are all timed only - they happen each cycle regardless of the instruction.
This leaves 1,3,6,7,8 to be controlled by logic.

1) only if a subtractor read is required (i.e. only on STO)
3) Only if we're dumping memory (also only on STO, but signficantly earlier than 1)
6) Only on JMP and JRP (jump relative)
7) Only on MVN
8) Also only on STO.

So the 'default' instruction is SUB; we do nothing for that; the other instructions STO, MVN, JMP, JRP we do specific actions.
JMP/JRP are only distinguished by things internal to the control unit (clearing the PC first).

For these I'd like to have instructions enumerated, so the 3 bits we get from memory get decoded into 1-of-8 raised sections, and the raised bits are actually used to drive bowden cables. JMP and JRP can
 both drive the same one.


Signals internal to logic unit:

1) PC Reader injector                  PCREAD
2) Eject data from instruction reg     IRCLR
3) Set up instruction reg              READIR
4) PC Increment                        PCINC
5) PC Zero                             PCZERO

That's 16 signals to get out of the cam.

Starting position: Instruction register should be clear, nothing asserted on the address bus. Memory bank should be deactivated.


MR = Mem reset

Also needed: IR holdoff

ADDRBIN probably can't be used until after we've regenerated, by which point the next address is waiting to enter the address buffer - we'd need something to gate it until we're ready for the next address

|||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |||||| |
PCREAD IRCLR  READIR PCINC  INJALL DIV1   DIV2   REGEN1 DIV3   DIV4   ACCZRO REGEN2 MEMEN  ADRHLD ADRBIN CMP   MR
  ##                                                                                         ##
        PC Now read into address buffer and address hold-off released <delay>
                                                          ##                          ##
                                                          ##
                                                <delay to read memory>
                                                   ##     ##                          ##
                                          <memory regenerated and instruction read in> NB - addr now available
                                                                                      ##                       ##
                                                          <memory now reset>
                ##                                                                           ##     ##
                                         < instructions now set up >
                                                                                             ##
                                        <memory address now set up >
(PCZERO 6)                    ##5   ##     ##1                  ##2     ##3           ##                 ##4
                              ##5   ##     ##1                  ##2
                              ##5   ##     ##1                  ##2                   ##
                               .        <data read now held at regen if not STO>
                                                  ##                           ##
		 < instruction complete >
         ##            ##

1. Only on STO.
2. JMP or JRL
3. Only on MVN.
4. Only on CMP. This can occur at any time after instruction's set up.
5. Only on STO.
6. Only on JMP.

This suggests several combinations - most instructions only need one firing thing - so INJALL, DIV1, DIV2, DIV4, CMP and ACCZRO can all be combined / run off one cam - they'll still need separate bowden cables.

## Instruction fetch

* Pulse PC reader to read program counter
* Switch destination registers to instruction register.
* Assert program counter onto address bus
* Activate memory bank
  -- Delay for memory to read into regenerator --
* Regenerate memory
  -- Delay for memory to regen and instruction register to read in --

## Decode

* Deactivate memory
* Instruction regsiter diversion off
* (Instruction logic) set up program counter / accumulator
* Assert instruction register onto address bus
* Activate memory cell

  --  Delay while waiting for memory to read in

* Meanwhile, if LDN, dump the accumulator.
* If STO, Fire the accumulator reader.
* If JMP, dump the program counter.

* Regen memory if we aren't in STO mode.

Following this, data fells either into the accumulator or instruction reg.

 -- Delay while the subtractor works

* For STO, activate the accumulator sender.

 -- Delay to read into memory

* Deactivate memory cell.

* Clear instruction register.

Repeat cycle.

## Outputs from the sequencer

### Signals not dependent on instruction

* PC reader
* Redirector 1 (to instruction register)
* Memory cell activate [1]
* Instruction register clear
* Assert instruction reg section to address bus
* Regenerate memory (STO does not need it, but there will be nothing in it, so asserting it does nothing)
* Accumulator sender (only does anything if we hit 'read accumulator')
* Assert PC to address bus

[1] It's an optimisation to not read memory on the second cycle if we have a CMP/STOP

### Signals dependent on instructions

* Read accumulator (Only for STO)
* Redirector 2 (to program counter) - only if JMP/JRP
* Clear program counter - only for JMP
* Clear accumulator - only for LDN
* Memory output dump - only for STO
* Add one to PC (CMP and accumulator top bit set)

# Instructions (written LSB on the right, unlike the original type)

000 JMP
001 JRP
010 LDN
011 STO
100 SUB
101 Also SUB
110 CMP
111 STOP

We don't implement STOP as JMP can put the processor in a halt loop.

Optimisation: For CMP and STOP, we don't need to read memory, so don't bother - it means we have to recirculate more ball bearings.


# Optional action table


Instruction: >
Action v                     JMP        JRP        LDN        STO        SUB        CMP
---------------------------------------------------------------------------------------
Regen after data read         Y          Y          Y                     Y          Y
Data divert to PC             Y          Y
Clear PC                      Y
Regenerate from subtractor                                     Y
Add 1 to PC if ACC Negative                                                          Y
Clear accumulator                                   Y

Most of these are single-instruction things - only 'data divert to PC' is unusual as it happens for two instructions. We can just have two separate lines which push it, if necessary. 'Regen after data read' is best negated - we can drop a vital link for the STO case rather than raising one.

For the CMP case - we need only feed one ball beaing into the read column for the 31st bit of the accumulator. If it was set to one, we capture the ball bearing coming out of the 1 column and divert this to the instruction counter. Note that we don't want to do this while reading the accumulator normally!

# List of all connections between the logic unit and arithmetic memory unit

Regenerator fire 1 (for instruction read use)
Regenerator fire 2 (for data read use)
Bottom regenerator fire 1
Data diverter to PC
Data diverter to instruction register
Injector diverter to accumulator read
Memory address lines 1-5
Memory access control
Injector control
Subtractor clear line
Subtractor read col 31
Feedback line from col 31 reader
